; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
AppName=Variman RETS Server
AppVerName=Variman RETS Server @VERSION@
AppPublisher=Center for REALTOR Technology
AppPublisherURL=http://www.crt.realors.org/
AppSupportURL=http://www.crt.realors.org/
AppUpdatesURL=http://www.crt.realors.org/
SourceDir=@BASEDIR@\build\rets-server
OutputDir=@BASEDIR@\dist
OutputBaseFilename=variman-@VERSION@-setup
DefaultDirName={pf}\Variman RETS Server
DefaultGroupName=Variman RETS Server
InfoBeforeFile=@BASEDIR@\project\build\iss_java.txt
LicenseFile=@BASEDIR@\LICENSE.TXT
UninstallFilesDir={app}\uninstall
MinVersion=0,4
Compression=@COMPRESSION@
ArchitecturesInstallIn64BitMode=x64 ia64

[Files]
Source: "*"; Excludes: "variman.exe,variman64.exe,\variman\WEB-INF\rets\rets-config.xml,\variman\WEB-INF\rets\rets-logging.properties,\logs\%"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs; Check: StopVarimanService
Source: "variman.exe"; DestDir: "{app}"; DestName: "variman.exe"; Check: IsX86
Source: "variman64.exe"; DestDir: "{app}";  DestName: "variman.exe"; Check: IsX64
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Dirs]
Name: "{app}\logs"

[Icons]
;Name: "{group}\CRT Variman RETS Server"; Filename: "{app}\MyProg.exe"
; NOTE: The following entry contains an English phrase ("Uninstall"). You are free to translate it into another language if required.
Name: "{group}\Uninstall CRT Variman RETS Server"; Filename: "{uninstallexe}"
Name: "{group}\View README"; Filename: "{app}\doc\readme.txt"
Name: "{group}\View Manual"; Filename: "{app}\doc\manual\index.html"
Name: "{group}\Variman Administration"; Filename: "{code:GetJavaHome}\bin\javaw.exe"; Parameters: "-jar variman-admin.jar"; WorkingDir: "{app}";

[UninstallDelete]
Type: filesandordirs; Name: "{app}\server\work"
Type: filesandordirs; Name: "{app}\server\logs"
Type: filesandordirs; Name: "{app}\logs"

[Run]
; NOTE: The following entry contains an English phrase ("Launch"). You are free to translate it into another language if required.
Filename: "{app}\variman.exe"; Parameters: "{code:InstallServiceParams}"; Description: "Install service"; Flags: runhidden; StatusMsg: "Installing Variman Service..."
Filename: "{app}\doc\readme.txt"; Description: "View the README file"; Flags: shellexec postinstall skipifsilent

[UninstallRun]
Filename: "net"; Parameters: "stop Variman"; Flags: runhidden
Filename: "{app}\variman.exe"; Parameters: "{code:UninstallServiceParams}"; Flags: runhidden

[Code]
var
  Java32Found       : Boolean;
  Java32Home        : String;
  Java32JvmDll      : String;
  Java32Version     : String;
  Java64Found       : Boolean;
  Java64Home        : String;
  Java64JvmDll      : String;
  Java64Version     : String;
  JavaFound         : Boolean;
  JavaHome          : String;
  JavaJvmDll        : String;
  JavaMajorVersion  : Integer;
  JavaMinorVersion  : Integer;
  JavaVersion       : String;
  ServiceName       : String;
  ServiceStopped    : Boolean;
  
function IsX64: Boolean;
begin
  Result := Java64Found and Is64BitInstallMode and (ProcessorArchitecture = pax64);
end;

function IsX86: Boolean;
begin
  Result := not IsX64;
end;

function GetJavaHome(Default: String): String;
begin
  Result:= JavaHome;
end;

procedure InitializeJava();
var
  JreKey: String;
  JreVersionKey: String;
  MajorVersion: String;
  MinorVersion: String;
  Success : Boolean;
begin
  JavaFound := False;
  Java32Found := False;
  Java64Found := False;
  JreKey := 'SOFTWARE\JavaSoft\Java Runtime Environment';
  Success := RegQueryStringValue(HKLM32, JreKey, 'CurrentVersion', Java32Version);
  if Success then
    begin
      // MsgBox('Found 32 bit Java Version: ' + Java32Version, mbInformation, MB_OK)
      if not RegQueryStringValue(HKLM32, JreKey, 'CurrentVersion', Java32Version) then
        Exit;

      JreVersionKey := JreKey + '\' + Java32Version;
      if not RegQueryStringValue(HKLM32, JreVersionKey, 'JavaHome', Java32Home) then
        Exit;
      if not RegQueryStringValue(HKLM32, JreVersionKey, 'RuntimeLib', Java32JvmDll) then
        Exit;
      Java32Found := True;
    end;
  // See if we can find 64 bit Java.
  try
    Success := RegQueryStringValue(HKLM64, JreKey, 'CurrentVersion', Java64Version);
    if Success then
      begin
        // MsgBox('Found 64 bit Java Version: ' + Java64Version, mbInformation, MB_OK)
        if not RegQueryStringValue(HKLM64, JreKey, 'CurrentVersion', Java64Version) then
          Exit;

        JreVersionKey := JreKey + '\' + Java64Version;
        if not RegQueryStringValue(HKLM64, JreVersionKey, 'JavaHome', Java64Home) then
          Exit;
        if not RegQueryStringValue(HKLM64, JreVersionKey, 'RuntimeLib', Java64JvmDll) then
          Exit;
        Java64Found := True;
      end
    else
      begin
        //MsgBox('64 bit Java Not Found ', mbInformation, MB_OK);
      end
  except
  end;

  // Figure out if we're running 64 bit mode and 64 bit Java has been found. Use it
  // if we can, otherwise, use the 32 bit version.
  if IsX64 then
    begin
      // JavaVersion is of the format "major.minor"
      MajorVersion  := Copy(Java64Version, 1, 1);
      MinorVersion  := Copy(Java64Version, 3, 1);
      JavaVersion   := Java64Version;
      JavaHome      := Java64Home;
      JavaJvmDll    := Java64JvmDll;
    end
  else
  if Java32Found then
    begin
      // JavaVersion is of the format "major.minor"
      MajorVersion  := Copy(Java32Version, 1, 1);
      MinorVersion  := Copy(Java32Version, 3, 1);
      JavaVersion   := Java32Version;
      JavaHome      := Java32Home;
      JavaJvmDll    := Java32JvmDll;
    end
  else
    Exit;

  JavaFound := true;
  JavaMajorVersion := StrToInt(MajorVersion);
  JavaMinorVersion := StrToInt(MinorVersion);
//  MsgBox('JavaVersion: ' + JavaVersion + #13
//           'JavaHome: ' + JavaHome + #13
//           'JavaJvmDll: ' + JavaJvmDll, mbInformation, MB_OK);

end;

function InitializeSetup(): Boolean;
begin
  InitializeJava();
  ServiceName := 'Variman';
  ServiceStopped := False;
  Result := True;
end;

function NextButtonClick(CurPage: Integer): Boolean;
begin
  Result := True;
  if CurPage = wpInfoBefore then begin
    if not JavaFound then begin
      MsgBox('Java was not found.' #13#13 'Cancel the installation and install Java.',
        mbCriticalError, MB_OK);
      Result := False;
      Exit;
    end
    if JavaMinorVersion < 5 then begin
      MsgBox('Java version 1.5 at a minimum is required, detected: ' + JavaVersion + #13#13
        'Cancel the installation and upgrade Java.', mbCriticalError, MB_OK);
      Result := False;
      Exit;
    end;
  end
end;

function InstallServiceParams(Default: String): String;
begin
  Result := '-install "' + ServiceName + '" "' + JavaJvmDll +
    '" "-Djava.class.path={app}\variman.jar" ' +
    '-Xms128m -Xmx1500m ' +
    '-Dcom.sun.management.jmxremote ' +
    '-start org.realtors.rets.server.tomcat.EmbeddedTomcat ' +
    '-params start ' +
    '-out "{app}\logs\stdout.log" -err "{app}\logs\stderr.log" ' +
    '-current "{app}"';
  Result := ExpandConstant(Result);
  //MsgBox('Install service: ' + Result, mbInformation, MB_OK);
end;

function UninstallServiceParams(Default: String): String;
begin
  Result := '-uninstall "' + ServiceName + '"';
  //MsgBox('Uninstall service: ' + Result, mbInformation, MB_OK);
end;

function StopVarimanService() : Boolean;
var rslt : integer;
begin
  if not ServiceStopped then begin
    //MsgBox('Removing Variman Service', mbInformation, MB_OK);
    Exec(GetSystemDir() + '\net.exe', 'stop Variman', GetSystemDir(), SW_HIDE, ewWaitUntilTerminated, rslt);
    ServiceStopped := True;
  end
  Result := True;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var lib: String;
var classes: String;
begin
  if CurStep = ssInstall then begin
    lib := ExpandConstant('{app}') + '\variman\WEB-INF\lib'
    classes := ExpandConstant('{app}') + '\variman\WEB-INF\classes'
    DelTree(lib, True, True, True);
    DelTree(classes, True, True, True);
  end;
end;
